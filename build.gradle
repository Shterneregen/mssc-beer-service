plugins {
	id "org.springframework.boot" version "2.3.2.RELEASE"
	id "io.spring.dependency-management" version "1.0.9.RELEASE"
	id "net.ltgt.apt" version "0.20"
	id "java"
}

group = "guru.springframework"
version = "0.0.1-SNAPSHOT"
sourceCompatibility = "11"

ext {
	set("mapstructVersion", "1.3.1.Final")
	set("mockitoVersion", "3.3.3")
	set("springCloudVersion", "Hoxton.SR6")
	set("logstashLogbackEncoderVersion", "6.4")
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation(
			"org.springframework.boot:spring-boot-starter-actuator",
			"org.springframework.boot:spring-boot-starter-artemis",
			"org.springframework.boot:spring-boot-starter-cache",
			"org.springframework.boot:spring-boot-starter-data-jpa",
			"org.springframework.boot:spring-boot-starter-validation",
			"org.springframework.boot:spring-boot-starter-web",
			"org.springframework.cloud:spring-cloud-starter-config",
			"org.springframework.cloud:spring-cloud-starter-netflix-eureka-client",
			"org.springframework.cloud:spring-cloud-starter-openfeign",
			"org.springframework.cloud:spring-cloud-starter-zipkin",
			"javax.cache:cache-api",
			"org.ehcache:ehcache",
			"org.mapstruct:mapstruct:$mapstructVersion",
			"net.logstash.logback:logstash-logback-encoder:$logstashLogbackEncoderVersion"
	)
	compileOnly "org.projectlombok:lombok"
	developmentOnly "org.springframework.boot:spring-boot-devtools"
	runtimeOnly(
			"com.h2database:h2",
			"mysql:mysql-connector-java"
	)
	annotationProcessor(
			"org.projectlombok:lombok",
			"org.mapstruct:mapstruct-processor:$mapstructVersion"
	)
	testImplementation("org.springframework.boot:spring-boot-starter-test") {
		exclude group: "org.junit.vintage", module: "junit-vintage-engine"
	}
	testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"
	testAnnotationProcessor "org.mapstruct:mapstruct-processor:$mapstructVersion"
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	useJUnitPlatform()
}
